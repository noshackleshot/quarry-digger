import groovy.json.JsonOutput

plugins {
    id 'net.neoforged.moddev' version "${version_mdg}"  // ModDevGradle для NeoForge
    id 'java'
    id 'eclipse'
    id 'idea'
}

group = 'com.shackleshot'
archivesBaseName = 'quarrydigger'
version = "${version_minecraft}-${version_build}"

// Переменные для подстановки в шаблоны
def versionReplaces = [
        'version'          : version_build,
        'mc_version'       : version_minecraft,
        'neoforge_version' : version_neoforge
]

sourceSets {
    main {
        resources {
            // Включаем сгенерированные метаданные (mods.toml и pack.mcmeta)
            srcDir "$buildDir/generated/sources/modMetadata"
        }
    }
    datagen {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

tasks.register("generateModMetadata", ProcessResources) {
    inputs.properties versionReplaces
    from("src/main/templates") {
        include "META-INF/neoforge.mods.toml", "pack.mcmeta"
        expand versionReplaces
    }
    destinationDir = file("$buildDir/generated/sources/modMetadata")
}

tasks.named("processResources", ProcessResources) {
    dependsOn tasks.named("generateModMetadata")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    inputs.property 'version', project.version
    inputs.property 'pack_format', 18
    inputs.property 'description', 'Quarry Digger Mod Resources'

    filesMatching("META-INF/neoforge.mods.toml") {
        expand versionReplaces
    }
    filesMatching("pack.mcmeta") {
        expand pack_format: 18, description: 'Quarry Digger Mod Resources'
    }
}

neoForge {
    version = version_neoforge
    addModdingDependenciesTo sourceSets.main
    addModdingDependenciesTo sourceSets.datagen

    runs {
        client {
            client()
            gameDirectory = file("$projectDir/run")
            systemProperty "neoforge.logging.markers", "REGISTRIES"
            systemProperty "neoforge.logging.console.level", "debug"
        }
        server {
            server()
            systemProperty "neoforge.logging.markers", "REGISTRIES"
            systemProperty "neoforge.logging.console.level", "debug"
            programArguments.add "-nogui"
        }
        data {
            data()
            sourceSet = sourceSets.datagen
            systemProperty "neoforge.logging.markers", "REGISTRIES"
            systemProperty "neoforge.logging.console.level", "debug"
            programArguments.addAll(
                    "--mod", "quarrydigger",
                    "--all",
                    "--output", file("src/generated/resources/").toString()
            )
        }
    }

    mods {
        quarrydigger {
            sourceSet sourceSets.main
            sourceSet sourceSets.datagen
        }
    }
}

repositories {
    maven { url = "https://maven.neoforged.net/releases" }
    mavenCentral()
    maven { url = "https://modmaven.dev" }
    maven { url = "https://cfa2.cursemaven.com" }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${version_neoforge}"

    compileOnly   "mekanism:Mekanism:${mekanism_version}:api"

    runtimeOnly   "mekanism:Mekanism:${mekanism_version}"
    runtimeOnly   "mekanism:Mekanism:${mekanism_version}:additions"
    runtimeOnly   "mekanism:Mekanism:${mekanism_version}:generators"
    runtimeOnly   "mekanism:Mekanism:${mekanism_version}:tools"
    // compile against the JEI API but do not include it at runtime
    compileOnly("mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}")
    // at runtime, use the full JEI jar for NeoForge
    runtimeOnly("mezz.jei:jei-${mc_version}-neoforge:${jei_version}")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

tasks.named("jar", Jar) {
    manifest {
        attributes(
                "Specification-Title": "quarrydigger",
                "Specification-Vendor": "shackleshot",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "shackleshot"
        )
    }
}