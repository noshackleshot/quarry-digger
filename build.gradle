plugins {
    // ForgeGradle 6.x â€“ required for MC 1.21.1
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
    // Standard Java + IDE support
    id 'java'
    id 'eclipse'
    id 'idea'
}

///////////////////////////////////////
//  Project coordinates & Java toolchain
///////////////////////////////////////

group = 'com.shackleshot'
version = '1.0.0'
archivesBaseName = 'quarrydigger'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

///////////////////////////////////////
//  Repositories & Dependencies
///////////////////////////////////////
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Your mod and FG tooling come from here
    maven { url = 'https://maven.minecraftforge.net' }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:1.21.1-52.1.1"
}

minecraft {
    // Official Mojang mappings
    mappings channel: 'official', version: '1.21.1'

    // Generate run configurations into /run
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
    copyIdeResources = true
    reobf = false
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }

    filesMatching('pack.mcmeta') {
        expand 'pack_format': 18,
                'description': 'Quarry Digger Mod Resources'
    }
}

// (Optional) Make IntelliJ download javadoc & sources
idea.module {
    downloadJavadoc = true
    downloadSources = true
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors
        ])
    }
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}